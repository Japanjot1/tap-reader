{"version":3,"file":"browser.js","sources":["../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/crypto.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/@noble/curves/esm/abstract/utils.js","../node_modules/@noble/curves/esm/abstract/modular.js","../node_modules/@noble/curves/esm/abstract/curve.js","../node_modules/@noble/curves/esm/abstract/weierstrass.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/curves/esm/_shortw_utils.js","../node_modules/@noble/curves/esm/secp256k1.js","../node_modules/@cmdcode/buff-utils/dist/module.mjs","../node_modules/@noble/hashes/esm/_u64.js","../node_modules/@noble/hashes/esm/sha512.js","../node_modules/@noble/hashes/esm/ripemd160.js","../src/hash.ts","../src/math.ts","../src/utils.ts","../src/point.ts","../src/assert.ts","../src/ecc.ts","../src/keys.ts","../src/derive.ts","../src/config.ts","../src/ecdh.ts","../src/sig.ts","../src/index.ts"],"sourcesContent":["export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexport function equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((c, point, isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            // Zero is valid point too!\n            if (this.is0()) {\n                if (CURVE.allowInfinityPoint)\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size (nBitLength+64)\n         * as per FIPS 186 B.4.1 with modulo bias being neglible.\n         */\n        randomPrivateKey: () => {\n            const rand = CURVE.randomBytes(Fp.BYTES + 8);\n            const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n            return ut.numberToBytesBE(num, CURVE.nByteLength);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * From draft-irtf-cfrg-hash-to-curve-16\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert$1 = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nvar assert$2 = assert$1;\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nArray.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert$2.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert$2.exists(this);\n        assert$2.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = wrapConstructor(() => new SHA256());\nwrapConstructor(() => new SHA224());\n\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nconst base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nconst base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nchain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nchain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nconst base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nconst base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nconst base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\ngenBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\ngenBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nconst base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nconst bech32 = genBech32('bech32');\nconst bech32m = genBech32('bech32m');\nconst utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nconst hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\n`Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\n\nconst Encoder = {\n    b58chk: {\n        encode: (data) => base58check(sha256).encode(data),\n        decode: (data) => base58check(sha256).decode(data)\n    },\n    base64: {\n        encode: (data) => base64.encode(data),\n        decode: (data) => base64.decode(data)\n    },\n    b64url: {\n        encode: (data) => base64url.encode(data),\n        decode: (data) => base64url.decode(data)\n    },\n    bech32: {\n        into_words: bech32.toWords,\n        from_words: bech32.fromWords,\n        encode: (prefix, data, limit = false) => {\n            return bech32.encode(prefix, bech32.toWords(data), limit);\n        },\n        decode: (data, limit = false) => {\n            const { prefix, words } = bech32.decode(data, limit);\n            return { prefix, words, bytes: bech32.fromWords(words) };\n        }\n    },\n    bech32m: {\n        into_words: bech32m.toWords,\n        from_words: bech32m.fromWords,\n        encode: (prefix, data, limit = false) => {\n            return bech32m.encode(prefix, bech32m.toWords(data), limit);\n        },\n        decode: (data, limit = false) => {\n            const { prefix, words } = bech32m.decode(data, limit);\n            return { prefix, words, bytes: bech32m.fromWords(words) };\n        }\n    }\n};\n\nfunction within_size(data, size) {\n    if (data.length > size) {\n        throw new TypeError(`Data is larger than array size: ${data.length} > ${size}`);\n    }\n}\nfunction is_hex(hex) {\n    if (hex.match(/[^a-fA-f0-9]/) !== null) {\n        throw new TypeError('Invalid characters in hex string: ' + hex);\n    }\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Length of hex string is invalid: ${hex.length}`);\n    }\n}\nfunction is_json(str) {\n    try {\n        JSON.parse(str);\n    }\n    catch {\n        throw new TypeError('JSON string is invalid!');\n    }\n}\nfunction is_safe_num(num) {\n    if (num > Number.MAX_SAFE_INTEGER) {\n        throw new TypeError('Number exceeds safe bounds!');\n    }\n}\nfunction is_prefix(actual, target) {\n    if (actual !== target) {\n        throw new TypeError(`Bech32 prefix does not match: ${actual} !== ${target}`);\n    }\n}\n\nvar assert = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    is_hex: is_hex,\n    is_json: is_json,\n    is_prefix: is_prefix,\n    is_safe_num: is_safe_num,\n    within_size: within_size\n});\n\nconst _0n = BigInt(0);\nconst _255n = BigInt(255);\nconst _256n = BigInt(256);\nfunction big_size(big) {\n    if (big <= 0xffn)\n        return 1;\n    if (big <= 0xffffn)\n        return 2;\n    if (big <= 0xffffffffn)\n        return 4;\n    if (big <= 0xffffffffffffffffn)\n        return 8;\n    if (big <= 0xffffffffffffffffffffffffffffffffn)\n        return 16;\n    if (big <= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn) {\n        return 32;\n    }\n    throw new TypeError('Must specify a fixed buffer size for bigints greater than 32 bytes.');\n}\nfunction bigToBytes(big, size, endian = 'be') {\n    if (size === undefined)\n        size = big_size(big);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (big > _0n) {\n        const byte = big & _255n;\n        const num = Number(byte);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        big = (big - byte) / _256n;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToBig(bytes) {\n    let num = BigInt(0);\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * _256n) + BigInt(bytes[i]);\n    }\n    return BigInt(num);\n}\n\nfunction binToBytes(binary) {\n    const bins = binary.split('').map(Number);\n    if (bins.length % 8 !== 0) {\n        throw new Error(`Binary array is invalid length: ${binary.length}`);\n    }\n    const bytes = new Uint8Array(bins.length / 8);\n    for (let i = 0, ct = 0; i < bins.length; i += 8, ct++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++) {\n            byte |= (bins[i + j] << (7 - j));\n        }\n        bytes[ct] = byte;\n    }\n    return bytes;\n}\nfunction bytesToBin(bytes) {\n    const bin = new Array(bytes.length * 8);\n    let count = 0;\n    for (const num of bytes) {\n        if (num > 255) {\n            throw new Error(`Invalid byte value: ${num}. Byte values must be between 0 and 255.`);\n        }\n        for (let i = 7; i >= 0; i--, count++) {\n            bin[count] = (num >> i) & 1;\n        }\n    }\n    return bin.join('');\n}\n\nfunction num_size(num) {\n    if (num <= 0xFF)\n        return 1;\n    if (num <= 0xFFFF)\n        return 2;\n    if (num <= 0xFFFFFFFF)\n        return 4;\n    throw new TypeError('Numbers larger than 4 bytes must specify a fixed size!');\n}\nfunction numToBytes(num, size, endian = 'be') {\n    if (size === undefined)\n        size = num_size(num);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    while (num > 0) {\n        const byte = num & 255;\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n        num = (num - byte) / 256;\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToNum(bytes) {\n    let num = 0;\n    for (let i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256) + bytes[i];\n        is_safe_num(num);\n    }\n    return num;\n}\n\nconst ec = new TextEncoder();\nconst dc = new TextDecoder();\nfunction strToBytes(str) {\n    return ec.encode(str);\n}\nfunction bytesToStr(bytes) {\n    return dc.decode(bytes);\n}\nfunction hex_size(hexstr, size) {\n    is_hex(hexstr);\n    const len = hexstr.length / 2;\n    if (size === undefined)\n        size = len;\n    if (len > size) {\n        throw new TypeError(`Hex string is larger than array size: ${len} > ${size}`);\n    }\n    return size;\n}\nfunction hexToBytes(hexstr, size, endian = 'le') {\n    size = hex_size(hexstr, size);\n    const use_le = (endian === 'le');\n    const buffer = new ArrayBuffer(size);\n    const dataView = new DataView(buffer);\n    let offset = (use_le) ? 0 : size - 1;\n    for (let i = 0; i < hexstr.length; i += 2) {\n        const char = hexstr.substring(i, i + 2);\n        const num = parseInt(char, 16);\n        if (use_le) {\n            dataView.setUint8(offset++, num);\n        }\n        else {\n            dataView.setUint8(offset--, num);\n        }\n    }\n    return new Uint8Array(buffer);\n}\nfunction bytesToHex(bytes) {\n    let chars = '';\n    for (let i = 0; i < bytes.length; i++) {\n        chars += bytes[i].toString(16).padStart(2, '0');\n    }\n    return chars;\n}\nconst Hex = {\n    encode: bytesToHex,\n    decode: hexToBytes\n};\nconst Txt = {\n    encode: strToBytes,\n    decode: bytesToStr\n};\n\nconst { getRandomValues } = crypto ?? globalThis.crypto ?? window.crypto;\nfunction random(size = 32) {\n    if (typeof getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(size));\n    }\n    throw new Error('Crypto module missing getRandomValues!');\n}\nfunction set_buffer(data, size, endian = 'be') {\n    if (size === undefined)\n        size = data.length;\n    within_size(data, size);\n    const buffer = new Uint8Array(size).fill(0);\n    const offset = (endian === 'be') ? 0 : size - data.length;\n    buffer.set(data, offset);\n    return buffer;\n}\nfunction join_array(arr) {\n    let i, offset = 0;\n    const size = arr.reduce((len, arr) => len + arr.length, 0);\n    const buff = new Uint8Array(size);\n    for (i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        buff.set(a, offset);\n        offset += a.length;\n    }\n    return buff;\n}\nfunction bigint_replacer(_, v) {\n    return typeof v === 'bigint'\n        ? `${v}n`\n        : v;\n}\nfunction bigint_reviver(_, v) {\n    return typeof v === 'string' && /n$/.test(v)\n        ? BigInt(v.slice(0, -1))\n        : v;\n}\n\nvar utils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    bigint_replacer: bigint_replacer,\n    bigint_reviver: bigint_reviver,\n    join_array: join_array,\n    random: random,\n    set_buffer: set_buffer\n});\n\nfunction buffer_data(data, size, endian) {\n    if (data instanceof ArrayBuffer) {\n        return new Uint8Array(data);\n    }\n    if (data instanceof Uint8Array) {\n        return set_buffer(data, size, endian);\n    }\n    if (Array.isArray(data)) {\n        try {\n            const arr = data.map(e => buffer_data(e, size, endian));\n            return join_array(arr);\n        }\n        catch (err) {\n            const { message } = err;\n            throw new TypeError('Invalid data caught in array.' + message);\n        }\n    }\n    if (typeof data === 'string') {\n        return hexToBytes(data, size, endian);\n    }\n    if (typeof data === 'bigint') {\n        return bigToBytes(data, size, endian);\n    }\n    if (typeof data === 'number') {\n        return numToBytes(data, size, endian);\n    }\n    if (typeof data === 'boolean') {\n        return Uint8Array.of(data ? 1 : 0);\n    }\n    throw new TypeError('Unsupported format:' + String(typeof data));\n}\n\nclass Buff extends Uint8Array {\n    static { this.num = numToBuff; }\n    static { this.big = bigToBuff; }\n    static { this.bin = binToBuff; }\n    static { this.raw = rawToBuff; }\n    static { this.str = strToBuff; }\n    static { this.hex = hexToBuff; }\n    static { this.bytes = buffer; }\n    static { this.json = jsonToBuff; }\n    static { this.base64 = base64ToBuff; }\n    static { this.b64url = b64urlToBuff; }\n    static { this.bech32 = bech32ToBuff; }\n    static { this.bech32m = bech32mToBuff; }\n    static { this.b58chk = b58chkToBuff; }\n    static { this.encode = strToBytes; }\n    static { this.decode = bytesToStr; }\n    static random(size = 32) {\n        const rand = random(size);\n        return new Buff(rand, size);\n    }\n    constructor(data, size, endian) {\n        if (data instanceof Buff &&\n            size === undefined) {\n            return data;\n        }\n        const buffer = buffer_data(data, size, endian);\n        super(buffer);\n    }\n    get arr() {\n        return [...this];\n    }\n    get num() {\n        return this.toNum();\n    }\n    get big() {\n        return this.toBig();\n    }\n    get str() {\n        return this.toStr();\n    }\n    get hex() {\n        return this.toHex();\n    }\n    get raw() {\n        return new Uint8Array(this);\n    }\n    get bin() {\n        return this.toBin();\n    }\n    get b58chk() {\n        return this.tob58chk();\n    }\n    get base64() {\n        return this.toBase64();\n    }\n    get b64url() {\n        return this.toB64url();\n    }\n    get digest() {\n        return this.toHash();\n    }\n    get id() {\n        return this.toHash().hex;\n    }\n    get stream() {\n        return new Stream(this);\n    }\n    toNum(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return bytesToNum(bytes);\n    }\n    toBig(endian = 'be') {\n        const bytes = (endian === 'be')\n            ? this.reverse()\n            : this;\n        return bytesToBig(bytes);\n    }\n    toBin() {\n        return bytesToBin(this);\n    }\n    toHash() {\n        const digest = sha256(this);\n        return new Buff(digest);\n    }\n    toJson(reviver) {\n        if (reviver === undefined) {\n            reviver = bigint_reviver;\n        }\n        const str = bytesToStr(this);\n        return JSON.parse(str, reviver);\n    }\n    toBech32(prefix, limit) {\n        return Encoder.bech32.encode(prefix, this, limit);\n    }\n    toBech32m(prefix, limit) {\n        return Encoder.bech32m.encode(prefix, this, limit);\n    }\n    toStr() { return bytesToStr(this); }\n    toHex() { return bytesToHex(this); }\n    toBytes() { return new Uint8Array(this); }\n    tob58chk() { return Encoder.b58chk.encode(this); }\n    toBase64() { return Encoder.base64.encode(this); }\n    toB64url() { return Encoder.b64url.encode(this); }\n    append(data) {\n        return Buff.join([this, Buff.bytes(data)]);\n    }\n    prepend(data) {\n        return Buff.join([Buff.bytes(data), this]);\n    }\n    reverse() {\n        const arr = new Uint8Array(this).reverse();\n        return new Buff(arr);\n    }\n    slice(start, end) {\n        const arr = new Uint8Array(this).slice(start, end);\n        return new Buff(arr);\n    }\n    set(array, offset) {\n        this.set(array, offset);\n    }\n    subarray(begin, end) {\n        const arr = new Uint8Array(this).subarray(begin, end);\n        return new Buff(arr);\n    }\n    write(bytes, offset) {\n        const b = Buff.bytes(bytes);\n        this.set(b, offset);\n    }\n    prefixSize(endian) {\n        const size = Buff.varInt(this.length, endian);\n        return Buff.join([size, this]);\n    }\n    static from(data) {\n        return new Buff(Uint8Array.from(data));\n    }\n    static of(...args) {\n        return new Buff(Uint8Array.of(...args));\n    }\n    static join(arr) {\n        const bytes = arr.map(e => Buff.bytes(e));\n        const joined = join_array(bytes);\n        return new Buff(joined);\n    }\n    static sort(arr, size) {\n        const hex = arr.map(e => buffer(e, size).hex);\n        hex.sort();\n        return hex.map(e => Buff.hex(e, size));\n    }\n    static varInt(num, endian) {\n        if (num < 0xFD) {\n            return Buff.num(num, 1);\n        }\n        else if (num < 0x10000) {\n            return Buff.of(0xFD, ...Buff.num(num, 2, endian));\n        }\n        else if (num < 0x100000000) {\n            return Buff.of(0xFE, ...Buff.num(num, 4, endian));\n        }\n        else if (BigInt(num) < 0x10000000000000000n) {\n            return Buff.of(0xFF, ...Buff.num(num, 8, endian));\n        }\n        else {\n            throw new Error(`Value is too large: ${num}`);\n        }\n    }\n}\nfunction numToBuff(number, size, endian) {\n    return new Buff(number, size, endian);\n}\nfunction binToBuff(data, size, endian) {\n    return new Buff(binToBytes(data), size, endian);\n}\nfunction bigToBuff(bigint, size, endian) {\n    return new Buff(bigint, size, endian);\n}\nfunction rawToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction strToBuff(data, size, endian) {\n    return new Buff(strToBytes(data), size, endian);\n}\nfunction hexToBuff(data, size, endian) {\n    return new Buff(data, size, endian);\n}\nfunction jsonToBuff(data, replacer) {\n    if (replacer === undefined) {\n        replacer = bigint_replacer;\n    }\n    const str = JSON.stringify(data, replacer);\n    return new Buff(strToBytes(str));\n}\nfunction base64ToBuff(data) {\n    return new Buff(Encoder.base64.decode(data));\n}\nfunction b64urlToBuff(data) {\n    return new Buff(Encoder.b64url.decode(data));\n}\nfunction bech32ToBuff(data, limit, chk_prefix) {\n    const { bytes, prefix } = Encoder.bech32.decode(data, limit);\n    if (typeof chk_prefix === 'string') {\n        is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction bech32mToBuff(data, limit, chk_prefix) {\n    const { bytes, prefix } = Encoder.bech32m.decode(data, limit);\n    if (typeof chk_prefix === 'string') {\n        is_prefix(prefix, chk_prefix);\n    }\n    return new Buff(bytes);\n}\nfunction b58chkToBuff(data) {\n    return new Buff(Encoder.b58chk.decode(data));\n}\nclass Stream {\n    constructor(data) {\n        this.data = Buff.bytes(data);\n        this.size = this.data.length;\n    }\n    peek(size) {\n        if (size > this.size) {\n            throw new Error(`Size greater than stream: ${size} > ${this.size}`);\n        }\n        return new Buff(this.data.slice(0, size));\n    }\n    read(size) {\n        size = size ?? this.readSize();\n        const chunk = this.peek(size);\n        this.data = this.data.slice(size);\n        this.size = this.data.length;\n        return chunk;\n    }\n    readSize(endian) {\n        const num = this.read(1).num;\n        switch (true) {\n            case (num >= 0 && num < 0xFD):\n                return num;\n            case (num === 0xFD):\n                return this.read(2).toNum(endian);\n            case (num === 0xFE):\n                return this.read(4).toNum(endian);\n            case (num === 0xFF):\n                return this.read(8).toNum(endian);\n            default:\n                throw new Error(`Varint is out of range: ${num}`);\n        }\n    }\n}\nfunction buffer(bytes, size, end) {\n    return new Buff(bytes, size, end);\n}\n\nexport { Buff, Encoder, Hex, Stream, Txt, assert, buffer, utils as util };\n//# sourceMappingURL=module.mjs.map\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n//# sourceMappingURL=ripemd160.js.map",null,null,null,null,null,null,null,null,null,null,null,null],"names":["number","n","Number","isSafeInteger","Error","bytes","b","lengths","Uint8Array","length","includes","assert","bool","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert$4","crypto","globalThis","undefined","u8a","a","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Array","from","v","i","toString","padStart","Hash$1","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","Hash","constructor","padOffset","isLE","super","pos","view","len","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","slice","destroy","to","Maj","c","SHA256_K","IV","SHA256_W","SHA2","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","SHA256","sha256","SHA224","_0n","_1n","_2n","hexes","bytesToHex","hex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","e","concatBytes","arrays","r","reduce","sum","pad","forEach","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","b1","b2","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","u","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","bitLen","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","add","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","fromBytes","validateBasic","curve","map","Gx","Gy","b2n","h2b","ut","DER","Err","_parseInt","toSig","sBytes","s","rBytesLeft","hexFromSig","sig","shl","rhl","rl","weierstrassPoints","opts","CURVE","ut.validateObject","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","point","isCompressed","toAffine","ut.concatBytes","y","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","key","ut.bytesToHex","ut.bytesToNumberBE","error","mod.mod","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","fromAffine","normalizeZ","points","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","iz","z","ax","ay","zz","cofactor","toRawBytes","toHex","_bits","bits","condition","item","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","hmac","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","mod.invert","cat","head","y2","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","ut.hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","groupOrder","minLen","mod.hashToPrivateScalar","precompute","isProbPub","delta","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","q","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","ut.createHmacDrbg","drbg","verify","signature","publicKey","sg","_sig","derError","message","is","HMAC","_key","iHash","oHash","buf","getPrototypeOf","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","a2","POW_2_128","c2","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","charCodeAt","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","args","schnorrGetPublicKey","schnorrSign","auxRand","t","rand","k_","rx","schnorrVerify","pub","schnorr","TypeError","assert$1","assert$2","hashConstructor","assertNumber","chain","wrap","decode","alphabet","digits","input","letter","index","indexOf","join","separator","split","padding","chr","end","normalize","fn","convertRadix","carry","done","digit","digitBase","floor","gcd","radix2carry","convertRadix2","radix2","revPadding","unsafeWrapper","apply","base16","base32","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","concat","base58check","checksum","payload","newChecksum","oldChecksum","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","words","encodingConst","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","lowered","toLowerCase","sepIndex","lastIndexOf","endsWith","actualLength","decodeToBytes","decodeUnsafe","bech32","bech32m","CODERS","utf8","TextDecoder","keys","Encoder","into_words","from_words","is_safe_num","MAX_SAFE_INTEGER","is_prefix","actual","target","_255n","_256n","bigToBytes","big","size","endian","big_size","use_le","ArrayBuffer","setUint8","numToBytes","num_size","ec","dc","strToBytes","bytesToStr","hex_size","hexstr","match","is_hex","set_buffer","within_size","join_array","buff","bigint_replacer","_","bigint_reviver","test","buffer_data","err","char","substring","of","Buff","numToBuff","bigToBuff","bin","binToBuff","raw","rawToBuff","strToBuff","hexToBuff","json","jsonToBuff","base64ToBuff","b64url","b64urlToBuff","bech32ToBuff","bech32mToBuff","b58chk","b58chkToBuff","random","toNum","toBig","toStr","toBin","tob58chk","toBase64","toB64url","toHash","id","stream","Stream","bytesToNum","bytesToBig","count","bytesToBin","toJson","reviver","JSON","parse","toBech32","toBech32m","chars","append","prepend","start","begin","write","prefixSize","varInt","joined","sort","binary","bins","ct","binToBytes","replacer","stringify","chk_prefix","peek","read","readSize","chunk","U32_MASK64","fromBig","le","u64$1","Ah","Al","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512","Rho","Id","Pi","idxL","idxR","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","group","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rr","sr","tl","tr","ripemd160","s256","s512","ripe160","hash256","hash160","r160","hmac256","hmac512","taghash","N","CONST","ecc","exp","parse_x","pubkey","normalize_x","xonly","keydata","depth","fprint","code","ECPoint","Noble","is_even","is_point","is_valid","pt","pa","pb","pc","parity","fail","throws","on_curve","in_field","valid_chain","path","startsWith","valid_path","valid_index","valid_derive_state","hardened","is_private","NoblePoint","assert.in_field","normalizeField","math.modN","generate","hasOddY","negated","gt","lt","eq","ne","math.ecc","import","math.CONST","from_x","cp","normalizePoint","assert.size","_p","get_seckey","secret","even_y","sec","get_pubkey","seckey","get_keypair","INT_REGEX","STR_REGEX","generate_code","SIGN_DEFAULTS","aux","CODE_DEFAULTS","sign_config","config","code_config","get_shared_key","self_sec","peer_pub","sp","get_shared_code","options","opt","peer","link","pub_key","rec_key","nonce","ecdh.get_shared_code","chal","adaptor","tweak","dp","compute_nonce","kp","ch","assert.fail","sG","eP","noble","secp","derive","key_path","key_data","chain_code","assert.valid_path","is_m","assert.valid_chain","paths","fullpath","tweaks","assert.valid_index","parse_path","assert.valid_derive_state","ecc.get_pubkey","next_code","assert.on_curve"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}