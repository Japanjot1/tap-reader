import { Buff, Bytes } from '@cmdcode/buff-utils';
import { PointData } from './types.js';
export { mod, pow, pow2, invert } from '@noble/curves/abstract/modular';
export declare const curve: Readonly<{
    readonly nBitLength: number;
    readonly nByteLength: number;
    readonly Fp: import("@noble/curves/abstract/modular").IField<bigint>;
    readonly n: bigint;
    readonly h: bigint;
    readonly hEff?: bigint | undefined;
    readonly Gx: bigint;
    readonly Gy: bigint;
    readonly allowInfinityPoint?: boolean | undefined;
    readonly a: bigint;
    readonly b: bigint;
    readonly allowedPrivateKeyLengths?: readonly number[] | undefined;
    readonly wrapPrivateKey?: boolean | undefined;
    readonly endo?: {
        beta: bigint;
        splitScalar: (k: bigint) => {
            k1neg: boolean;
            k1: bigint;
            k2neg: boolean;
            k2: bigint;
        };
    } | undefined;
    readonly isTorsionFree?: ((c: import("@noble/curves/abstract/weierstrass").ProjConstructor<bigint>, point: import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>) => boolean) | undefined;
    readonly clearCofactor?: ((c: import("@noble/curves/abstract/weierstrass").ProjConstructor<bigint>, point: import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>) => import("@noble/curves/abstract/weierstrass").ProjPointType<bigint>) | undefined;
    readonly hash: import("@noble/curves/abstract/utils").CHash;
    readonly hmac: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;
    readonly randomBytes: (bytesLength?: number | undefined) => Uint8Array;
    lowS: boolean;
    readonly bits2int?: ((bytes: Uint8Array) => bigint) | undefined;
    readonly bits2int_modN?: ((bytes: Uint8Array) => bigint) | undefined;
    readonly p: bigint;
}>;
export declare const CONST: {
    N: bigint;
    P: bigint;
    G: PointData;
    _0n: bigint;
    _1n: bigint;
    _2n: bigint;
    _3n: bigint;
    _4n: bigint;
};
export declare const ecc: Readonly<import("@noble/curves/abstract/modular").IField<bigint> & Required<Pick<import("@noble/curves/abstract/modular").IField<bigint>, "isOdd">>>;
export declare const modN: (x: bigint) => bigint;
export declare const modP: (x: bigint) => bigint;
export declare const powN: (x: bigint, exp: bigint) => bigint;
export declare const on_curve: (x: bigint) => boolean;
export declare const in_field: (x: bigint) => boolean;
export declare function mod_bytes(bytes: Bytes): Buff;
//# sourceMappingURL=math.d.ts.map